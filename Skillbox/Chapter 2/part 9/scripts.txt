import random

first_army = [random.randint(50, 80) for _ in range(10)]
second_army = [random.randint(30, 60) for _ in range(10)]
third_army = ['Погиб' if first_army[i] + second_army[i] >= 100 else 'Выжил' for i in range(10)]
print(first_army)
print(second_army)
print(third_army)

********************************************************************************

text = input('Введите строку:')
symbol = input('Введите дополнительный символ:')

double_text = [x * 2 for x in text]
double_text_sym = [x + symbol for x in double_text]

print(double_text)
print(double_text_sym)

********************************************************************************

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

new_prices = [(price if price > 0 else 0)  for price in original_prices]

print(new_prices)

********************************************************************************

prices = [float(input("Цена на товар: ")) for _ in range(5)]

first_year = int(input("Повышение на первый год: "))
second_year = int(input("Повышение на второй год: "))

all_prices = "Сумма цен за каждый год: "
for percent in 0, first_year, second_year:
    prices = [price * (1 + percent / 100) for price in prices]
    all_prices += " " + str(round(sum(prices), 2))

print(all_prices)

********************************************************************************



********************************************************************************

nums = [48, -10, 9, 38, 17, 50, -5, 43, 46, 12]

print(nums[:5])
print(nums[:-2])
print(nums[::2])
print(nums[1::2])
print(nums[::-1])
print(nums[::-2])


********************************************************************************

n = int(input("Введите количество чисел N: "))

numbers = [random.randint(-10, 10) for _ in range(n)]

a = random.randint(0, len(numbers) - 2)
b = random.randint(a + 1, len(numbers) - 1)
# Генерируем числа так, чтобы они не выходили за границу списка
print(numbers, a, b)
numbers = numbers[:a] + numbers[b + 1:]
print(numbers)

********************************************************************************

original_prices = [-12, 3, 5, -2, 1]

new_prices = original_prices[:]

for i in range(len(original_prices)):
    if new_prices[i] < 0:
        new_prices[i] = 0

print("Мы потеряли: ",  abs(sum(original_prices) - sum(new_prices)))



********************************************************************************


a = int(input('первое число: '))
b = int(input('второе число: '))
numbers = [i for i in range(a, b+1) if i % 2 == 0]
print(numbers)

********************************************************************************

kub = [x ** 3 for x in range(5,11)]
square = [x ** 2 for x in range(5,11)]
print(kub, square)

********************************************************************************

main = [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1]
first_company = [0, 0, 0]
second_company = [1, 0, 0, 1, 1]
third_company = [1, 1, 1, 0, 1]

main.extend(first_company)
main.extend(second_company)
main.extend(third_company)

print('Общий список задач: ', main)
print('Кол-во невыполненных задач: ', main.count(0))

********************************************************************************

zoo = ['lion', 'kangaroo', 'elephant', 'monkey']
zoo.insert(1, 'bear')
zoo.remove('elephant')
print("Зоопарк:", zoo)

print("Лев сидит в клетке номер", zoo.index('lion') + 1)
print("Обезьяна сидит в клетке номер", zoo.index('monkey') + 1)

********************************************************************************

matrix = [[1, 2 ,3], [4, 5, 6], [7, 8, 9]]

for col in matrix:
    for row in col:
        print(row, end=' ')
    print()


********************************************************************************

goods = [["яблоки", 50], ["апельсины", 190], ["груши", 100], ["нектарины", 200], ["бананы", 77]]

print('Текущий ассортимент: ', goods)

fruit_name = input('Новый фрукт: ')

price = int(input('Цена: '))

goods.append([fruit_name, price])

print('Новый ассортимент: ', goods)

for price in goods:
    price[1] = round(price[1] * 1.08, 2)
print("Новый ассортимент с увел. ценой:", goods)


********************************************************************************

number_of_workers = int(input("Кол-во сотрудников: "))
wages_of_workers = []
for i in range(number_of_workers):
    wage = int(input(f"Зарплата {i + 1} сотрудника: "))
    if wage > 0:
        wages_of_workers.append(wage)

print("Осталось сотрудников:", len(wages_of_workers))
print("Зарплаты:", wages_of_workers)
print("Максимальная зп:", max(wages_of_workers))
print("Минимальная зп:", min(wages_of_workers))

********************************************************************************

first_line = input("Введите первую строку: ")
second_line = input("Введите вторую строку: ")
count_first = first_line.count("!") + first_line.count("?")
count_second = second_line.count("!") + second_line.count("?")
if count_first > count_second:
    print(first_line + second_line)
elif count_second > count_first:
    print(second_line + first_line)
else:
    print("Ой")

********************************************************************************

films = [
    'Крепкий орешек', 'Назад в будущее', 'Таксист',
    'Леон', 'Богемская рапсодия', 'Город грехов',
    'Мементо', 'Отступники', 'Деревня',
    'Проклятый остров', 'Начало', 'Матрица'
]

n = int(input("Сколько фильмов выбрать? "))
your_films = []
for i in range(n):
    print("Ваш текущий топ фильмов:", your_films)
    film_name = input("Имя фильма: ")
    print("Команды: добавить, вставить, удалить")
    command = input("Введите команду: ")
    if film_name not in your_films:
        if command == "добавить":
            your_films.append(film_name)
        elif command == "вставить":
            insert_index = int(input("Введите индекс для вставки "))
            insert_index %= len(your_films)  # ограничим индекс списка, чтобы он не вылезал за границу списка
            your_films.insert(insert_index, film_name)
    else:
        if command == "удалить":
            your_films.remove(film_name)
        elif command == "добавить" or command == "вставить":
            print("Этот фильм уже есть в вашем списке.")

print("Ваш текущий топ фильмов:", your_films)

********************************************************************************

numbers = [3,7,5]
degree = 1
new_number = 0

while True:
 number = int(input('Новое число: '))
 numbers.append(number)
 print('Текущий список чисел:', numbers)
 for i in numbers:
  print(i ** 2, i ** 3, i ** 4)
 print()


********************************************************************************

count_workers = int(input('Кол-во сотрудников в офисе: '))
list_workers = []

for _ in range(count_workers):
    id_worker = int(input('ID сотрудника: '))
    list_workers.append(id_worker)

search_id = int(input("Какого сотрудника ищем? "))
search = False
for id in list_workers:
    if id == search_id:
        search = True
if search:
    print("Сотрудник работает!")
else:
    print("Сотрудник не работает!")

********************************************************************************

numbers = [0]
i =0
while i < 100:
 i += 1
 numbers.append(i)
print(numbers)

numbers = []
for number in range(101):
    numbers.append(number)
print(numbers)

********************************************************************************

def check_ip(ip_address):
    split_ip_address = ip_address.split(".")
    if len(split_ip_address) == 4:
        for part_ip_address in split_ip_address:
            if not part_ip_address.isdigit():
                print(f'\tОшибка: {part_ip_address} не целое число.')
                break
            elif not int(part_ip_address) <= 255:
                print(f'\tОшибка: {part_ip_address} превышает 255.')
                break
        else:
            print('\tIP-адрес корректен')
            return ip_address
    else:
        print('Ошибка: адрес — это четыре числа, разделённые точками.')

def check_file_name(file_name):
    incorrect_endings = '.txt', '.docx'
    special_symbols = '@', '№', '$', '%', '^', '&', '*', '(', ')', '\\'

    if file_name.startswith(special_symbols):
        print('\tОшибка: название начинается на один из специальных символов')
    elif not file_name.endswith(incorrect_endings):
        print('\tОшибка: неверное расширение файла. Ожидалось .txt или .docx')
    else:
        print('\tФайл назван верно.')
        return file_name

def maximum_length(text):
    text = text[0].split()
    return max(text, key=len)

data = [
    ["128.16.35.a4", ["file_21.txt @data_report.txt notes2024.txt"]],
    ["34.56.42,5", ["file.txt analysis_results.ttx notes2000.txt"]],
    ["128.0.0.255", ["file_1.txt document_2024.docx notes2022.txt"]],
    ["240.127.56.340", ["file_432.txt ^budget_summary.txt notes2021.txt"]],
    ["192.168.1.10", ["file_432.txt  important_info.txt notes1900.txt"]],
    ["192.c8.1.10", ["file_432.txt  &meeting_notes.docx notes1995.txt"]],
    ["10.20.30.40", ["file_432.txt  analysis_results.txt notes1998.txt"]],
]

valid_info = []
for info in data:
    print(f"Проверяю ip {info[0]}")
    ip_address = check_ip(info[0])

    print(f"Ищу самый длинный файл для ip {info[0]}")
    maxi_length = maximum_length(info[1])

    print(f"\tЭто файл {maxi_length}. \nПроверяю корректность имени")
    file_name = check_file_name(maxi_length)

    if ip_address and file_name:
        valid_info.append([ip_address, info[1]])
    print("=" * 50)

print(f"Новая структура данных\n[")
for i in valid_info:
    print(f"\t{i}")
print("]")

********************************************************************************

def caesar_cipher(text, shift):
		char_list = [(rus_alphabet[(rus_alphabet.index(char) + shift) % len(rus_alphabet)]
								if char != ' ' else ' ') for char in text]
		result = ''.join(char_list)
		return result

rus_alphabet = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
input_text = input('Введите сообщение: ').lower()
shift_word = int(input('Введите сдвиг: '))

output_text = caesar_cipher(input_text, shift_word)

print('Зашифрованное сообщение:', output_text)

********************************************************************************

def nice_view(text):
    text = ", ".join(text.split(';'))
    return text.title()
site_menu = input('Введите доступное меню: ')
print('Доступное меню:', site_menu)
print('На данный момент в меню есть:', nice_view(site_menu))


********************************************************************************

words = [input("Введите слово: ") for _ in range(3)]
text = input("Введите текст: ")
words_count = [text.count(word) for word in words]

print(words_count)

********************************************************************************

input_name = input('Имя: ')
order_number = int(input('Номер заказа: '))
hello_text = 'Здравствуйте, {name}! Ваш номер заказа: {order}. Приятного дня!'


print(hello_text.format(name = input_name, order = order_number))

********************************************************************************

friend_name = input('Введите имя: ')
credit_value = int(input('Введите долг: '))

print('{name}!, {name}, привет! Как дела, {name}? Где мои {cash} рублей? {name}!'.format(name = friend_name, cash = credit_value))

********************************************************************************

ip_address = "{0}.{1}.{2}.{3}"
count = 0
numbers = []
while count < 4:
    new_number = int(input("Введите число: "))
    if 0 <= new_number <= 255:
        numbers.append(new_number)
        count += 1
    else:
        print('Ошибка ввода!')

print(ip_address.format(*numbers))
# * полезный инструмент, но и без него можно справиться, вручную прописав элементы по индексам
print(ip_address.format(numbers[0], numbers[1], numbers[2], numbers[3]))


********************************************************************************

first_text = input('Введите текст: ').split()
correct_text = ' '.join(first_text)
print('Исправленный текст:', correct_text)

********************************************************************************

path = input("Путь к файлу: ")
disk = input("На каком диске должен лежать файл: ")
extension = input("Требуемое расширение файла: ")

if path.startswith(disk) and path.endswith(extension):
    print("Путь корректен!")
else:
    print("Путь некорректен!")

********************************************************************************

def text_coding(text):
    count = 0
    result = ""
    for index, symbol in enumerate(text):
        count += 1
        # Если следующий символ другой или это последний символ
        if index == len(text) - 1 or symbol != text[index + 1]:
            result += f'{symbol}{count}'
            count = 0  # Сброс счетчика для новой группы символов
    return result

user_text = input('Введите строку: ')
print('Закодированная строка:', text_coding(user_text))


********************************************************************************

def shift_detection(first_text, second_text):
    first_text *= 2
    index = first_text.find(second_text)

    if index != -1:
        result = f"Первая строка получается из второй со сдвигом {index}"
    else:
        result = "Первую строку нельзя получить из второй с помощью циклического сдвига."
    return result
first_text = input('Первая строка: ')
second_text = input('Вторая строка: ')
print(shift_detection(first_text, second_text))

********************************************************************************

text = input("Введите текст: ")
lowers = len([letter for letter in text if letter.islower()])
uppers = len([letter for letter in text if letter.isupper()])

if lowers > uppers:
    print("Результат:", text.lower())
else:
    print("Результат:", text.upper())

********************************************************************************

file = open('numbers.txt', 'r')
summ = 0
for elem in file:
    summ += int(elem)

new_file = open('answer.txt', 'w')
new_file.write(str(summ))

********************************************************************************

import os
path = os.path.abspath(os.path.join('task', 'group_1.txt'))
file = open(path, 'r', encoding='utf-8')

summa = 0
diff = 0
for i_line in file:
    info = i_line.split()
    summa += int(info[2])
    diff -= int(info[2])

file.close()

path2 = os.path.abspath(os.path.join('task/Additional_info', 'group_2.txt'))
file_2 = open(path2, 'r', encoding='utf-8')

compose = 1

for i_line in file_2:
    info = i_line.split()
    compose *= int(info[2])

file_2.close()

print(summa)

print(diff)

print(compose)

********************************************************************************

import os
print("Корень диска:", os.path.abspath(os.sep).split(os.sep)[0])
print("Корень диска:", os.sep)

********************************************************************************

import os

your_path = input('Путь: ')
if os.path.isfile(your_path):
    print('Это файл')
    print('Размер файла: ', os.path.getsize(your_path), 'байт')
elif os.path.isdir(your_path):
    print('Это папка')
else:
    print('Указанного пути не существует')


********************************************************************************

import os
folder = 'access'
file = 'admin.bat'
real_path = os.path.join(folder, file)
abs_path = os.path.abspath(real_path)
print(real_path)
print(abs_path)

********************************************************************************

import os

def find_file(cur_path, file_name):
    print("Запуск поиска в папке", os.path.join(os.path.abspath(cur_path)))
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        print("Проверяется путь", path)
        if file_name == i_elem:
            print(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                break
    else:
        result = None

    return result

find_file('..', 'task 8.3.py')


********************************************************************************

import random
import os


def find_file(cur_path, file_names):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem in file_names:
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_names)
            if result:
                all_paths.extend(result)

    return all_paths


def check_file_inside(path_to_file):
    file = open(path_to_file, "r", encoding="utf8")
    for line in file:
        print(line, end='')
    file.close()


all_paths = find_file(
    "..",
    (
        "task 5.3.2.py",
        "task 3.4.3.py",
        "task 9.2.2.py",
    ),
)
check_file_inside(random.choice(all_paths))

********************************************************************************

import os
def find_file(cur_path, ending):
    all_paths = []
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if i_elem.endswith(ending):
            all_paths.append(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, ending)
            if result:
                all_paths.extend(result)

    return all_paths
def get_text_from_file(path_to_file):
    file = open(path_to_file, "r", encoding="utf8")
    result = ""
    for line in file:
        result += line
    return result


all_py_files = find_file('..', '.py')  # вместо ".." можно вставить путь до папки python_basic

file_result = open("scripts.txt", "w", encoding="utf8")

for file_path in all_py_files:
    file_result.write(get_text_from_file(file_path))
    file_result.write("\n" * 2 + "*" * 80 + "\n" * 2)

********************************************************************************

import os

for path in os.listdir('..'):
    print(os.path.join(os.path.abspath('..'), path))

********************************************************************************

import os


print(os.listdir())
path_to_first = os.path.join('task', 'group_1.txt')
path_to_second = os.path.join('task', 'Additional_info', 'group_2.txt')

file = open(path_to_first, 'r', encoding='utf8')
file_2 = open(path_to_second, 'r', encoding='utf8')

summa = 0
diff = 0
compose = 1

for i_line in file:
    info = i_line.split()
    if info:
        summa += int(info[2])
        diff -= int(info[2])

for i_line in file_2:
    info = i_line.split()
    if info:
        compose *= int(info[2])

file.close()
file_2.close()

print(summa)

print(diff)

print(compose)

********************************************************************************

incomes = {

    'apple': 5600.20,

    'orange': 3500.45,

    'banana': 5000.00,

    'bergamot': 3700.56,

    'durian': 5987.23,

    'peach': 10000.50,

    'pear': 1020.00,

    'persimmon': 310.00,

}

for fruit, price in incomes.items():
    print(fruit, '--', price)


********************************************************************************

data = {

    (5000, 123456): ('Иванов', 'Василий'),

    (6000, 111111): ('Иванов', 'Петр'),

    (7000, 222222): ('Медведев', 'Алексей'),

    (8000, 333333): ('Алексеев', 'Георгий'),

    (9000, 444444): ('Георгиева', 'Мария')

}

number = int(input("Введите номер паспорта: "))
series = int(input("Введите серию паспорта: "))

number_and_series = (number, series)

if number_and_series in data:
    for index, person_name in enumerate(data[number_and_series]):
        print(person_name, end=' ')
else:
    print("Такого человека нет")


********************************************************************************

import random

first_tuple = tuple(random.randint(0, 5) for number in range(10))
second_tuple = tuple(random.randint(-5, 0) for number in range(10))
third_tuple = first_tuple + second_tuple
zero_count = third_tuple.count(0)
print("First tuple:", first_tuple)
print("Second tuple:", second_tuple)
print('Third tuple: ', third_tuple)
print('Count of Zero in Third tuple: ', zero_count)

********************************************************************************

your_text = input('Строка: ')
print('Ответ: ', end = '')
for index, value in enumerate(your_text):
    if value == '~':
        print(index, end = ' ')


********************************************************************************

import random


def change(nums):
    index = random.randint(0, 5) % len(nums)
    value = random.randint(100, 1000)
    nums = list(nums)
    nums[index] = value
    return tuple(nums), value


my_nums = 1, 2, 3, 4, 5

new_nums, rand_val = change(my_nums)
print(new_nums, rand_val)
new_nums_2, rand_val_2 = change(new_nums)
rand_val += rand_val_2
print(new_nums_2, rand_val)


********************************************************************************

import random

first_list = [random.]

********************************************************************************

import math

def cilinder_square(r, h):
    side = 2 * math.pi * r * h
    full = side + 2 * math.pi * r ** 2
    return side, full

radius_str, height_str = input('Введите радиус и высоту через запятую: ').split(',')
radius = float(radius_str)
height = float(height_str)

side, full = cilinder_square(radius, height)

print('Площадь боковой поверхности: ', round(side, 2))
print('Полная площадь: ', round(full, 2))

********************************************************************************

print([i_value for i_key, i_value in {0: 0, 1: 100, 2: 144, 3: 20, 4: 19}.items() if i_key % 2 == 0])


********************************************************************************

phone_book = {}

while True:
    first_name = input('Введите имя: ')
    second_name = input('Введите фамилию: ')
    person_key = first_name, second_name
    if person_key not in phone_book:
        phone_book[person_key] = int(input('Введите номер телефона: '))
    else:
        print('Контакт {name} уже имеется в контактах'.format(name=person_key))
    print(phone_book)

********************************************************************************

server_data = {

    "server": {

        "host": "127.0.0.1",

        "port": "10"

    },

    "configuration": {

        "access": "true",

        "login": "Ivan",

        "password": "qwerty"

    }

}

for name, configuration in server_data.items():
    print(name, ':')
    for i_params, data in configuration.items():
        print('\t', i_params, ':', data)

********************************************************************************

players_dict = {

    1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},

    2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},

    3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},

    4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},

    5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},

    6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},

    7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},

    8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}

}

help_dict = {"Rest": "отдыхают",
             "Training": "тренируются",
             "Travel": "путешествуют"}

team_order = ["A", "B", "C"]

index = 0
for state in help_dict:
    print(f"Все члены команды из команды {team_order[index]}, которые {help_dict[state]}:")
    for player in players_dict.values():
        if player["status"] == state and player["team"] == team_order[index]:
            print(player["name"])
    index += 1

********************************************************************************

text = input("Введите текст: ")

frequency = {}
for symbol in text:
    if symbol in frequency:
        frequency[symbol] += 1
    else:
        frequency[symbol] = 1

for letter, freq in sorted(frequency.items()):
    print(letter, ':', freq)

print("Максимальная частота: ", max(frequency.values()))

********************************************************************************

number_int = int(input('Введите целое число: '))
number_dict = {}


for number in range(1, number_int + 1):
    number_dict[number] = number ** 2

print(number_dict)

********************************************************************************

incomes = {

    'apple': 5600.20,

    'orange': 3500.45,

    'banana': 5000.00,

    'bergamot': 3700.56,

    'durian': 5987.23,

    'grapefruit': 300.40,

    'peach': 10000.50,

    'pear': 1020.00,

    'persimmon': 310.00,

}

total_income = 0

for price in incomes.values():
    total_income += price

min_price = min(incomes.values())
min_key = min(incomes, key = incomes.get)

incomes.pop(min_key)

print(f'Общий доход за год составил {total_income} рублей')
print(f'Самый маленький доход у {min_key}. Он составляет {min_price} рублей')
print('Итоговый словарь:', incomes)


********************************************************************************

data = {
    "address": "0x544444444444",
    "ETH": {
        "balance": 444,
        "totalIn": 444,
        "totalOut": 4
    },
    "count_txs": 2,
    "tokens": [
        {
            "fst_token_info": {
                "address": "0x44444",
                "name": "fdf",
                "decimals": 0,
                "symbol": "dsfdsf",
                "total_supply": "3228562189",
                "owner": "0x44444",
                "last_updated": 1519022607901,
                "issuances_count": 0,
                "holders_count": 137528,
                "price": False
            },
            "balance": 5000,
            "totalIn": 0,
            "total_out": 0
        },
        {
            "sec_token_info": {
                "address": "0x44444",
                "name": "ggg",
                "decimals": "2",
                "symbol": "fff",
                "total_supply": "250000000000",
                "owner": "0x44444",
                "last_updated": 1520452201,
                "issuances_count": 0,
                "holders_count": 20707,
                "price": False
            },
            "balance": 500,
            "totalIn": 0,
            "total_out": 0
        }
    ]
}

# 1. Вывести списки ключей и значений словаря.
print("Ключи data:", list(data.keys()))
print("Значения data:", list(data.values()))

# 2. В ETH добавить ключ total_diff со значением 100.
print("\nДо добавления total_diff:", data['ETH'])
data['ETH']['total_diff'] = 100
print("После добавления total_diff:", data['ETH'])

# 3. Внутри fst_token_info значение ключа name поменять с fdf на doge.
print("\nДо изменения name:", data['tokens'][0]['fst_token_info']['name'])
data['tokens'][0]['fst_token_info']['name'] = 'doge'
print("После изменения name:", data['tokens'][0]['fst_token_info']['name'])

# 4. Удалить total_out из словарей внутри списка tokens и присвоить сумму этих значений в total_out внутри ETH.
print("\nДо удаления total_out в tokens:")
for token in data['tokens']:
    print(token)
total = 0
for token in data['tokens']:
    total += token.pop('total_out')
print("Сумма total_out:", total)
data['ETH']['total_out'] = total
print("После удаления total_out в tokens:")
for token in data['tokens']:
    print(token)
print("ETH после присвоения суммы total_out:", data['ETH'])

# 5. Внутри sec_token_info изменить название ключа price на total_price.
print("\nДо изменения price:", data['tokens'][1]['sec_token_info'])
sec_token_info = data['tokens'][1]['sec_token_info']
sec_token_info['total_price'] = sec_token_info.pop('price')
print("После изменения price:", data['tokens'][1]['sec_token_info'])

********************************************************************************

small_storage = {

    'гвозди': 5000,

    'шурупы': 3040,

    'саморезы': 2000

}

big_storage = {

    'доски': 1000,

    'балки': 150,

    'рейки': 600

}

big_storage.update(small_storage)

item_search = input('Поиск товара: ').lower()

quantity = big_storage.get(item_search)

if quantity is not None:
    print(f'Результат поиска "{item_search}". Наличие на складе {quantity} шт.')
else:
    print('Товар не найден')


********************************************************************************

order = {
    'apple': 2,

    'banana': 3,

    'pear': 1,

    'watermelon': 10,

    'chocolate': 5
}

incomes = {

    'apple': 5600.20,

    'orange': 3500.45,

    'banana': 5000.00,

    'bergamot': 3700.56,

    'durian': 5987.23,

    'grapefruit': 300.40,

    'peach': 10000.50,

    'pear': 1020.00,

    'persimmon': 310.00,

}
summ_price = 0
for product, quantity in order.items():
    price = incomes.get(product, 0)
    total_price = quantity * price
    summ_price += total_price
    print(product, '-', quantity, 'кг *', price, 'руб. =',  total_price, 'руб.')
print('Итого стоимость: ', summ_price, 'руб.')





********************************************************************************

current_contacts = {}
while True:
    print("Текущие контакты на телефоне:")
    if current_contacts:
        for name in current_contacts:
            print(name, current_contacts[name])
    else:
        print("<Пусто>")
    new_contact = input("Введите имя (для остановки введите пустую строку): ")
    new_telephone = int(input("Введите номер телефона: "))
    if new_contact in current_contacts:
        print("Ошибка: такое имя уже существует.")
    else:
        current_contacts[new_contact] = new_telephone

********************************************************************************

# Напишите функцию, которая считает факториал числа с помощью рекурсии.

def factorial(n):
	if n == 0 or n == 1:
		return 1
	else:
		return n * factorial(n - 1)

n = int(input("Введите число для вычисления факториала: "))
print(f"Факториал числа {n} равен {factorial(n)}")

# Пример использования функции

********************************************************************************

data_names_dict = {
    "<class 'str'>": "строка",
    "<class 'dict'>": "словарь",
    "<class 'list'>": "список",
    "<class 'set'>": "множество"
}

mutable_check_helper = {
    "mutable": ("словарь", "список", "множество")
}


def check_info(data):
    type_of_data = type(data)
    name_of_data = ""
    if str(type_of_data) in data_names_dict:
        name_of_data = data_names_dict[str(type_of_data)]

    if name_of_data in mutable_check_helper["mutable"]:
        property_of_data = "Изменяемый (mutable)"
    else:
        property_of_data = "Неизменяемый (immutable)"

    print(f"Тип данных: {type_of_data} ({name_of_data})")
    print(property_of_data)
    print("Id объекта:", id(data))


data_input = "привет"
check_info(data_input)


********************************************************************************

def checker(question,
            error_message="Неверный ввод. Пожалуйста, введите 'да' или 'нет'.",
            count_of_errors=3):
    while count_of_errors:
        user_input = input(question)
        if user_input.lower() == "да":
            return 1
        elif user_input.lower() == "нет":
            return 0
        else:
            print(error_message)
        count_of_errors -= 1
        print("Осталось попыток:", count_of_errors)


# checker("да?")
# checker("да?", "ДА ил НЕТ?!")
# checker("да?", count_of_errors=3)

********************************************************************************

def power(a, n):
    if n == 0:
        return 1
    if n < 0:
        return 1 / power(a, -n)
    return a * power(a, n - 1)

float_num = float(input('Введите вещественное число: '))
int_num = int(input('Введите степень числа: '))

print(float_num, '**', int_num, '=', power(float_num, int_num))

********************************************************************************

def add_num(num, nums=None):
    nums = nums or []
    # хитрая конструкция, которая позволит упростить ввод:
    # if not nums:
    #    nums = []
    # Первый вариант будет выбран, если nums не равен None, иначе будет создан и записан пустой список
    nums.append(num)
    print(nums)


add_num(5)

add_num(10)

add_num(15)

********************************************************************************

def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template
    else:
        return None


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = create_dict(i_element)
        if new_elem:
            new_list.append(new_elem)
    return new_list


data = ["sad", {"sds": 23}, {43}, [12, 42, 1], 2323]
data = data_preparation(data)
print(data)

********************************************************************************

import random

def change_dict(dct):
    num = random.randint(1, 100)
    for i_key, i_value in dct.items():
        if isinstance(i_value, list):
            i_value.append(num)
        if isinstance(i_value, dict):
            i_value[num] = i_key
        if isinstance(i_value, set):
            i_value.add(num)


nums_list = [1, 2, 3]
some_dict = {1: 'text', 2: 'another text'}
uniq_nums = {1, 2, 3}
common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}

change_dict(common_dict)
print(common_dict)

# Решить это задание можно разными способами
# Мы можем вручную копировать каждый входящий элемент:
common_dict = {1: nums_list.copy(), 2: some_dict.copy(), 3: uniq_nums.copy(), 4: (10, 20, 30)}
change_dict(common_dict)
print(common_dict)
# Либо мы можем применить вспомогательную функцию, которая сделает это за нас:
import copy

common_dict = {1: nums_list, 2: some_dict, 3: uniq_nums, 4: (10, 20, 30)}
common_dict_2 = copy.deepcopy(common_dict)  # Она будет особенно полезна в структурах, в которых множество вложенных переменных
change_dict(common_dict_2)
print(common_dict_2)

print(nums_list, some_dict, uniq_nums)

********************************************************************************

